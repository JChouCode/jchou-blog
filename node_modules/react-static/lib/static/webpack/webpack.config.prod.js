"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _webpack = _interopRequireDefault(require("webpack"));

var _path = _interopRequireDefault(require("path"));

var _caseSensitivePathsWebpackPlugin = _interopRequireDefault(require("case-sensitive-paths-webpack-plugin"));

var _webpackBundleAnalyzer = require("webpack-bundle-analyzer");

var _terserWebpackPlugin = _interopRequireDefault(require("terser-webpack-plugin"));

var _webpackNodeExternals = _interopRequireDefault(require("webpack-node-externals"));

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _optimizeCssAssetsWebpackPlugin = _interopRequireDefault(require("optimize-css-assets-webpack-plugin"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _rules = _interopRequireDefault(require("./rules"));

//
function common(state) {
  var analyze = state.analyze,
      config = state.config,
      debug = state.debug;
  var _config$paths = config.paths,
      ROOT = _config$paths.ROOT,
      DIST = _config$paths.DIST,
      NODE_MODULES = _config$paths.NODE_MODULES,
      SRC = _config$paths.SRC,
      ASSETS = _config$paths.ASSETS;
  process.env.REACT_STATIC_ENTRY_PATH = config.entry;
  process.env.REACT_STATIC_SITE_ROOT = config.siteRoot;
  process.env.REACT_STATIC_BASE_PATH = config.basePath;
  process.env.REACT_STATIC_PUBLIC_PATH = config.publicPath;
  process.env.REACT_STATIC_ASSETS_PATH = config.assetsPath;

  if (!DIST.startsWith(ROOT)) {
    // we build outside of project dir, so reset some paths
    process.env.REACT_STATIC_ASSETS_PATH = config.assetsPath.replace(DIST, '');
  }

  var splitChunks = {
    chunks: 'all',
    minSize: 10000,
    minChunks: 1,
    maxAsyncRequests: 5,
    maxInitialRequests: 5,
    automaticNameDelimiter: '~',
    name: true,
    cacheGroups: {
      vendors: {
        test: /[\\/]node_modules[\\/]/,
        priority: -10,
        chunks: 'all'
      },
      "default": {
        minChunks: 2,
        priority: -20,
        reuseExistingChunk: true
      }
    }
  };
  var extrackCSSChunks = new _extractCssChunksWebpackPlugin["default"]({
    filename: '[name].[chunkHash:8].css',
    chunkFilename: '[id].[chunkHash:8].css'
  });

  if (!config.extractCssChunks) {
    splitChunks.cacheGroups = {
      styles: {
        name: 'styles',
        test: /\.css$/,
        chunks: 'all',
        enforce: true
      }
    };
    extrackCSSChunks = new _extractCssChunksWebpackPlugin["default"]({
      filename: '[name].[chunkHash:8].css'
    });
  }

  return {
    mode: 'production',
    context: _path["default"].resolve(__dirname, '../../../node_modules'),
    entry: config.disableRuntime ? config.entry : [require.resolve('../../bootstrapPlugins'), require.resolve('../../bootstrapTemplates'), require.resolve('../../bootstrapApp')],
    output: {
      filename: '[name].[hash:8].js',
      // dont use chunkhash, its not a chunk
      chunkFilename: 'templates/[name].[chunkHash:8].js',
      path: ASSETS,
      publicPath: process.env.REACT_STATIC_ASSETS_PATH || '/'
    },
    optimization: {
      sideEffects: true,
      minimize: true,
      minimizer: [new _terserWebpackPlugin["default"]((0, _objectSpread2["default"])({
        cache: true,
        parallel: true,
        exclude: /\.min\.js/
      }, config.terser, {
        sourceMap: config.productionSourceMaps || config.terser.sourceMap || debug,
        terserOptions: (0, _objectSpread2["default"])({
          ie8: false
        }, config.terser.terserOptions, {
          mangle: (0, _objectSpread2["default"])({
            safari10: true
          }, config.terser.terserOptions.mangle),
          parse: (0, _objectSpread2["default"])({
            ecma: 8
          }, config.terser.terserOptions.parse),
          compress: (0, _objectSpread2["default"])({
            ecma: 5
          }, config.terser.terserOptions.compress),
          output: (0, _objectSpread2["default"])({
            ecma: 5
          }, config.terser.terserOptions.output)
        })
      })), new _optimizeCssAssetsWebpackPlugin["default"]({})],
      splitChunks: splitChunks
    },
    performance: {
      maxEntrypointSize: 300000
    },
    module: {
      rules: (0, _rules["default"])({
        config: config,
        stage: 'prod',
        isNode: false
      }),
      strictExportPresence: true
    },
    resolve: {
      modules: [NODE_MODULES, SRC, DIST].concat((0, _toConsumableArray2["default"])([NODE_MODULES, SRC, DIST].map(function (d) {
        return DIST.startsWith(ROOT) ? _path["default"].relative(__dirname, d) : _path["default"].resolve(d);
      })), ['node_modules']),
      extensions: ['.wasm', '.mjs', '.js', '.json', '.jsx'],
      alias: {
        react$: (0, _resolveFrom["default"])(config.paths.NODE_MODULES, 'react'),
        'react-dom$': (0, _resolveFrom["default"])(config.paths.NODE_MODULES, 'react-dom'),
        'react-universal-component': (0, _resolveFrom["default"])(__dirname, 'react-universal-component')
      }
    },
    externals: [],
    target: undefined,
    plugins: [new _webpack["default"].EnvironmentPlugin(process.env), extrackCSSChunks, new _caseSensitivePathsWebpackPlugin["default"](), analyze && new _webpackBundleAnalyzer.BundleAnalyzerPlugin()].filter(function (d) {
      return d;
    }),
    devtool: debug || config.productionSourceMaps ? 'source-map' : false
  };
}

function _default(state) {
  var stage = state.stage,
      paths = state.config.paths;
  var result = common(state);
  if (stage !== 'node') return result; // Node only!!!

  result.output.filename = 'static-app.js';
  result.output.path = paths.ARTIFACTS;
  result.output.libraryTarget = 'umd';
  result.optimization.minimize = false;
  result.optimization.minimizer = [];
  result.target = 'node';
  result.devtool = false;
  result.externals = [new RegExp("".concat(paths.PLUGINS)), function (context, request, callback) {
    var resolved = _path["default"].resolve(context, request);

    if ([/react-static(\\|\/)lib(\\|\/)browser/, /webpack-flush-chunks/].some(function (d) {
      return d.test(resolved);
    })) {
      return callback(null, "commonjs ".concat(resolved));
    }

    callback();
  }, (0, _webpackNodeExternals["default"])()];
  result.module.rules = (0, _rules["default"])(state);
  result.plugins = [new _webpack["default"].EnvironmentPlugin(process.env), new _caseSensitivePathsWebpackPlugin["default"](), new _webpack["default"].optimize.LimitChunkCountPlugin({
    maxChunks: 1
  })];
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0aWMvd2VicGFjay93ZWJwYWNrLmNvbmZpZy5wcm9kLmpzIl0sIm5hbWVzIjpbImNvbW1vbiIsInN0YXRlIiwiYW5hbHl6ZSIsImNvbmZpZyIsImRlYnVnIiwicGF0aHMiLCJST09UIiwiRElTVCIsIk5PREVfTU9EVUxFUyIsIlNSQyIsIkFTU0VUUyIsInByb2Nlc3MiLCJlbnYiLCJSRUFDVF9TVEFUSUNfRU5UUllfUEFUSCIsImVudHJ5IiwiUkVBQ1RfU1RBVElDX1NJVEVfUk9PVCIsInNpdGVSb290IiwiUkVBQ1RfU1RBVElDX0JBU0VfUEFUSCIsImJhc2VQYXRoIiwiUkVBQ1RfU1RBVElDX1BVQkxJQ19QQVRIIiwicHVibGljUGF0aCIsIlJFQUNUX1NUQVRJQ19BU1NFVFNfUEFUSCIsImFzc2V0c1BhdGgiLCJzdGFydHNXaXRoIiwicmVwbGFjZSIsInNwbGl0Q2h1bmtzIiwiY2h1bmtzIiwibWluU2l6ZSIsIm1pbkNodW5rcyIsIm1heEFzeW5jUmVxdWVzdHMiLCJtYXhJbml0aWFsUmVxdWVzdHMiLCJhdXRvbWF0aWNOYW1lRGVsaW1pdGVyIiwibmFtZSIsImNhY2hlR3JvdXBzIiwidmVuZG9ycyIsInRlc3QiLCJwcmlvcml0eSIsInJldXNlRXhpc3RpbmdDaHVuayIsImV4dHJhY2tDU1NDaHVua3MiLCJFeHRyYWN0Q3NzQ2h1bmtzIiwiZmlsZW5hbWUiLCJjaHVua0ZpbGVuYW1lIiwiZXh0cmFjdENzc0NodW5rcyIsInN0eWxlcyIsImVuZm9yY2UiLCJtb2RlIiwiY29udGV4dCIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiZGlzYWJsZVJ1bnRpbWUiLCJyZXF1aXJlIiwib3V0cHV0Iiwib3B0aW1pemF0aW9uIiwic2lkZUVmZmVjdHMiLCJtaW5pbWl6ZSIsIm1pbmltaXplciIsIlRlcnNlclBsdWdpbiIsImNhY2hlIiwicGFyYWxsZWwiLCJleGNsdWRlIiwidGVyc2VyIiwic291cmNlTWFwIiwicHJvZHVjdGlvblNvdXJjZU1hcHMiLCJ0ZXJzZXJPcHRpb25zIiwiaWU4IiwibWFuZ2xlIiwic2FmYXJpMTAiLCJwYXJzZSIsImVjbWEiLCJjb21wcmVzcyIsIk9wdGltaXplQ1NTQXNzZXRzUGx1Z2luIiwicGVyZm9ybWFuY2UiLCJtYXhFbnRyeXBvaW50U2l6ZSIsIm1vZHVsZSIsInJ1bGVzIiwic3RhZ2UiLCJpc05vZGUiLCJzdHJpY3RFeHBvcnRQcmVzZW5jZSIsIm1vZHVsZXMiLCJtYXAiLCJkIiwicmVsYXRpdmUiLCJleHRlbnNpb25zIiwiYWxpYXMiLCJyZWFjdCQiLCJleHRlcm5hbHMiLCJ0YXJnZXQiLCJ1bmRlZmluZWQiLCJwbHVnaW5zIiwid2VicGFjayIsIkVudmlyb25tZW50UGx1Z2luIiwiQ2FzZVNlbnNpdGl2ZVBhdGhzUGx1Z2luIiwiQnVuZGxlQW5hbHl6ZXJQbHVnaW4iLCJmaWx0ZXIiLCJkZXZ0b29sIiwicmVzdWx0IiwiQVJUSUZBQ1RTIiwibGlicmFyeVRhcmdldCIsIlJlZ0V4cCIsIlBMVUdJTlMiLCJyZXF1ZXN0IiwiY2FsbGJhY2siLCJyZXNvbHZlZCIsInNvbWUiLCJvcHRpbWl6ZSIsIkxpbWl0Q2h1bmtDb3VudFBsdWdpbiIsIm1heENodW5rcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQURBO0FBR0EsU0FBU0EsTUFBVCxDQUFnQkMsS0FBaEIsRUFBdUI7QUFBQSxNQUNiQyxPQURhLEdBQ2NELEtBRGQsQ0FDYkMsT0FEYTtBQUFBLE1BQ0pDLE1BREksR0FDY0YsS0FEZCxDQUNKRSxNQURJO0FBQUEsTUFDSUMsS0FESixHQUNjSCxLQURkLENBQ0lHLEtBREo7QUFBQSxzQkFFNkJELE1BQU0sQ0FBQ0UsS0FGcEM7QUFBQSxNQUViQyxJQUZhLGlCQUViQSxJQUZhO0FBQUEsTUFFUEMsSUFGTyxpQkFFUEEsSUFGTztBQUFBLE1BRURDLFlBRkMsaUJBRURBLFlBRkM7QUFB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IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBDYXNlU2Vuc2l0aXZlUGF0aHNQbHVnaW4gZnJvbSAnY2FzZS1zZW5zaXRpdmUtcGF0aHMtd2VicGFjay1wbHVnaW4nXG5pbXBvcnQgeyBCdW5kbGVBbmFseXplclBsdWdpbiB9IGZyb20gJ3dlYnBhY2stYnVuZGxlLWFuYWx5emVyJ1xuaW1wb3J0IFRlcnNlclBsdWdpbiBmcm9tICd0ZXJzZXItd2VicGFjay1wbHVnaW4nXG5pbXBvcnQgbm9kZUV4dGVybmFscyBmcm9tICd3ZWJwYWNrLW5vZGUtZXh0ZXJuYWxzJ1xuaW1wb3J0IEV4dHJhY3RDc3NDaHVua3MgZnJvbSAnZXh0cmFjdC1jc3MtY2h1bmtzLXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IE9wdGltaXplQ1NTQXNzZXRzUGx1Z2luIGZyb20gJ29wdGltaXplLWNzcy1hc3NldHMtd2VicGFjay1wbHVnaW4nXG5pbXBvcnQgcmVzb2x2ZUZyb20gZnJvbSAncmVzb2x2ZS1mcm9tJ1xuLy9cbmltcG9ydCBydWxlcyBmcm9tICcuL3J1bGVzJ1xuXG5mdW5jdGlvbiBjb21tb24oc3RhdGUpIHtcbiAgY29uc3QgeyBhbmFseXplLCBjb25maWcsIGRlYnVnIH0gPSBzdGF0ZVxuICBjb25zdCB7IFJPT1QsIERJU1QsIE5PREVfTU9EVUxFUywgU1JDLCBBU1NFVFMgfSA9IGNvbmZpZy5wYXRoc1xuXG4gIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19FTlRSWV9QQVRIID0gY29uZmlnLmVudHJ5XG4gIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19TSVRFX1JPT1QgPSBjb25maWcuc2l0ZVJvb3RcbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX0JBU0VfUEFUSCA9IGNvbmZpZy5iYXNlUGF0aFxuICBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfUFVCTElDX1BBVEggPSBjb25maWcucHVibGljUGF0aFxuICBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfQVNTRVRTX1BBVEggPSBjb25maWcuYXNzZXRzUGF0aFxuXG4gIGlmICghRElTVC5zdGFydHNXaXRoKFJPT1QpKSB7XG4gICAgLy8gd2UgYnVpbGQgb3V0c2lkZSBvZiBwcm9qZWN0IGRpciwgc28gcmVzZXQgc29tZSBwYXRoc1xuICAgIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19BU1NFVFNfUEFUSCA9IGNvbmZpZy5hc3NldHNQYXRoLnJlcGxhY2UoRElTVCwgJycpXG4gIH1cblxuICBjb25zdCBzcGxpdENodW5rcyA9IHtcbiAgICBjaHVua3M6ICdhbGwnLFxuICAgIG1pblNpemU6IDEwMDAwLFxuICAgIG1pbkNodW5rczogMSxcbiAgICBtYXhBc3luY1JlcXVlc3RzOiA1LFxuICAgIG1heEluaXRpYWxSZXF1ZXN0czogNSxcbiAgICBhdXRvbWF0aWNOYW1lRGVsaW1pdGVyOiAnficsXG4gICAgbmFtZTogdHJ1ZSxcbiAgICBjYWNoZUdyb3Vwczoge1xuICAgICAgdmVuZG9yczoge1xuICAgICAgICB0ZXN0OiAvW1xcXFwvXW5vZGVfbW9kdWxlc1tcXFxcL10vLFxuICAgICAgICBwcmlvcml0eTogLTEwLFxuICAgICAgICBjaHVua3M6ICdhbGwnLFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgbWluQ2h1bmtzOiAyLFxuICAgICAgICBwcmlvcml0eTogLTIwLFxuICAgICAgICByZXVzZUV4aXN0aW5nQ2h1bms6IHRydWUsXG4gICAgICB9LFxuICAgIH0sXG4gIH1cblxuICBsZXQgZXh0cmFja0NTU0NodW5rcyA9IG5ldyBFeHRyYWN0Q3NzQ2h1bmtzKHtcbiAgICBmaWxlbmFtZTogJ1tuYW1lXS5bY2h1bmtIYXNoOjhdLmNzcycsXG4gICAgY2h1bmtGaWxlbmFtZTogJ1tpZF0uW2NodW5rSGFzaDo4XS5jc3MnLFxuICB9KVxuXG4gIGlmICghY29uZmlnLmV4dHJhY3RDc3NDaHVua3MpIHtcbiAgICBzcGxpdENodW5rcy5jYWNoZUdyb3VwcyA9IHtcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBuYW1lOiAnc3R5bGVzJyxcbiAgICAgICAgdGVzdDogL1xcLmNzcyQvLFxuICAgICAgICBjaHVua3M6ICdhbGwnLFxuICAgICAgICBlbmZvcmNlOiB0cnVlLFxuICAgICAgfSxcbiAgICB9XG4gICAgZXh0cmFja0NTU0NodW5rcyA9IG5ldyBFeHRyYWN0Q3NzQ2h1bmtzKHtcbiAgICAgIGZpbGVuYW1lOiAnW25hbWVdLltjaHVua0hhc2g6OF0uY3NzJyxcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb2RlOiAncHJvZHVjdGlvbicsXG4gICAgY29udGV4dDogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL25vZGVfbW9kdWxlcycpLFxuICAgIGVudHJ5OiBjb25maWcuZGlzYWJsZVJ1bnRpbWVcbiAgICAgID8gY29uZmlnLmVudHJ5XG4gICAgICA6IFtcbiAgICAgICAgICByZXF1aXJlLnJlc29sdmUoJy4uLy4uL2Jvb3RzdHJhcFBsdWdpbnMnKSxcbiAgICAgICAgICByZXF1aXJlLnJlc29sdmUoJy4uLy4uL2Jvb3RzdHJhcFRlbXBsYXRlcycpLFxuICAgICAgICAgIHJlcXVpcmUucmVzb2x2ZSgnLi4vLi4vYm9vdHN0cmFwQXBwJyksXG4gICAgICAgIF0sXG4gICAgb3V0cHV0OiB7XG4gICAgICBmaWxlbmFtZTogJ1tuYW1lXS5baGFzaDo4XS5qcycsIC8vIGRvbnQgdXNlIGNodW5raGFzaCwgaXRzIG5vdCBhIGNodW5rXG4gICAgICBjaHVua0ZpbGVuYW1lOiAndGVtcGxhdGVzL1tuYW1lXS5bY2h1bmtIYXNoOjhdLmpzJyxcbiAgICAgIHBhdGg6IEFTU0VUUyxcbiAgICAgIHB1YmxpY1BhdGg6IHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19BU1NFVFNfUEFUSCB8fCAnLycsXG4gICAgfSxcbiAgICBvcHRpbWl6YXRpb246IHtcbiAgICAgIHNpZGVFZmZlY3RzOiB0cnVlLFxuICAgICAgbWluaW1pemU6IHRydWUsXG4gICAgICBtaW5pbWl6ZXI6IFtcbiAgICAgICAgbmV3IFRlcnNlclBsdWdpbih7XG4gICAgICAgICAgY2FjaGU6IHRydWUsXG4gICAgICAgICAgcGFyYWxsZWw6IHRydWUsXG4gICAgICAgICAgZXhjbHVkZTogL1xcLm1pblxcLmpzLyxcbiAgICAgICAgICAuLi5jb25maWcudGVyc2VyLFxuICAgICAgICAgIHNvdXJjZU1hcDpcbiAgICAgICAgICAgIGNvbmZpZy5wcm9kdWN0aW9uU291cmNlTWFwcyB8fCBjb25maWcudGVyc2VyLnNvdXJjZU1hcCB8fCBkZWJ1ZyxcbiAgICAgICAgICB0ZXJzZXJPcHRpb25zOiB7XG4gICAgICAgICAgICBpZTg6IGZhbHNlLFxuICAgICAgICAgICAgLi4uY29uZmlnLnRlcnNlci50ZXJzZXJPcHRpb25zLFxuICAgICAgICAgICAgbWFuZ2xlOiB7IHNhZmFyaTEwOiB0cnVlLCAuLi5jb25maWcudGVyc2VyLnRlcnNlck9wdGlvbnMubWFuZ2xlIH0sXG4gICAgICAgICAgICBwYXJzZTogeyBlY21hOiA4LCAuLi5jb25maWcudGVyc2VyLnRlcnNlck9wdGlvbnMucGFyc2UgfSxcbiAgICAgICAgICAgIGNvbXByZXNzOiB7IGVjbWE6IDUsIC4uLmNvbmZpZy50ZXJzZXIudGVyc2VyT3B0aW9ucy5jb21wcmVzcyB9LFxuICAgICAgICAgICAgb3V0cHV0OiB7IGVjbWE6IDUsIC4uLmNvbmZpZy50ZXJzZXIudGVyc2VyT3B0aW9ucy5vdXRwdXQgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IE9wdGltaXplQ1NTQXNzZXRzUGx1Z2luKHt9KSxcbiAgICAgIF0sXG4gICAgICBzcGxpdENodW5rcyxcbiAgICB9LFxuICAgIHBlcmZvcm1hbmNlOiB7XG4gICAgICBtYXhFbnRyeXBvaW50U2l6ZTogMzAwMDAwLFxuICAgIH0sXG4gICAgbW9kdWxlOiB7XG4gICAgICBydWxlczogcnVsZXMoeyBjb25maWcsIHN0YWdlOiAncHJvZCcsIGlzTm9kZTogZmFsc2UgfSksXG4gICAgICBzdHJpY3RFeHBvcnRQcmVzZW5jZTogdHJ1ZSxcbiAgICB9LFxuICAgIHJlc29sdmU6IHtcbiAgICAgIG1vZHVsZXM6IFtcbiAgICAgICAgTk9ERV9NT0RVTEVTLFxuICAgICAgICBTUkMsXG4gICAgICAgIERJU1QsXG4gICAgICAgIC4uLltOT0RFX01PRFVMRVMsIFNSQywgRElTVF0ubWFwKGQgPT5cbiAgICAgICAgICBESVNULnN0YXJ0c1dpdGgoUk9PVCkgPyBwYXRoLnJlbGF0aXZlKF9fZGlybmFtZSwgZCkgOiBwYXRoLnJlc29sdmUoZClcbiAgICAgICAgKSxcbiAgICAgICAgJ25vZGVfbW9kdWxlcycsXG4gICAgICBdLFxuICAgICAgZXh0ZW5zaW9uczogWycud2FzbScsICcubWpzJywgJy5qcycsICcuanNvbicsICcuanN4J10sXG4gICAgICBhbGlhczoge1xuICAgICAgICByZWFjdCQ6IHJlc29sdmVGcm9tKGNvbmZpZy5wYXRocy5OT0RFX01PRFVMRVMsICdyZWFjdCcpLFxuICAgICAgICAncmVhY3QtZG9tJCc6IHJlc29sdmVGcm9tKGNvbmZpZy5wYXRocy5OT0RFX01PRFVMRVMsICdyZWFjdC1kb20nKSxcbiAgICAgICAgJ3JlYWN0LXVuaXZlcnNhbC1jb21wb25lbnQnOiByZXNvbHZlRnJvbShcbiAgICAgICAgICBfX2Rpcm5hbWUsXG4gICAgICAgICAgJ3JlYWN0LXVuaXZlcnNhbC1jb21wb25lbnQnXG4gICAgICAgICksXG4gICAgICB9LFxuICAgIH0sXG4gICAgZXh0ZXJuYWxzOiBbXSxcbiAgICB0YXJnZXQ6IHVuZGVmaW5lZCxcbiAgICBwbHVnaW5zOiBbXG4gICAgICBuZXcgd2VicGFjay5FbnZpcm9ubWVudFBsdWdpbihwcm9jZXNzLmVudiksXG4gICAgICBleHRyYWNrQ1NTQ2h1bmtzLFxuICAgICAgbmV3IENhc2VTZW5zaXRpdmVQYXRoc1BsdWdpbigpLFxuICAgICAgYW5hbHl6ZSAmJiBuZXcgQnVuZGxlQW5hbHl6ZXJQbHVnaW4oKSxcbiAgICBdLmZpbHRlcihkID0+IGQpLFxuICAgIGRldnRvb2w6IGRlYnVnIHx8IGNvbmZpZy5wcm9kdWN0aW9uU291cmNlTWFwcyA/ICdzb3VyY2UtbWFwJyA6IGZhbHNlLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtcbiAgICBzdGFnZSxcbiAgICBjb25maWc6IHsgcGF0aHMgfSxcbiAgfSA9IHN0YXRlXG5cbiAgY29uc3QgcmVzdWx0ID0gY29tbW9uKHN0YXRlKVxuICBpZiAoc3RhZ2UgIT09ICdub2RlJykgcmV0dXJuIHJlc3VsdFxuXG4gIC8vIE5vZGUgb25seSEhIVxuICByZXN1bHQub3V0cHV0LmZpbGVuYW1lID0gJ3N0YXRpYy1hcHAuanMnXG4gIHJlc3VsdC5vdXRwdXQucGF0aCA9IHBhdGhzLkFSVElGQUNUU1xuICByZXN1bHQub3V0cHV0LmxpYnJhcnlUYXJnZXQgPSAndW1kJ1xuICByZXN1bHQub3B0aW1pemF0aW9uLm1pbmltaXplID0gZmFsc2VcbiAgcmVzdWx0Lm9wdGltaXphdGlvbi5taW5pbWl6ZXIgPSBbXVxuICByZXN1bHQudGFyZ2V0ID0gJ25vZGUnXG4gIHJlc3VsdC5kZXZ0b29sID0gZmFsc2VcbiAgcmVzdWx0LmV4dGVybmFscyA9IFtcbiAgICBuZXcgUmVnRXhwKGAke3BhdGhzLlBMVUdJTlN9YCksXG4gICAgKGNvbnRleHQsIHJlcXVlc3QsIGNhbGxiYWNrKSA9PiB7XG4gICAgICBjb25zdCByZXNvbHZlZCA9IHBhdGgucmVzb2x2ZShjb250ZXh0LCByZXF1ZXN0KVxuICAgICAgaWYgKFxuICAgICAgICBbL3JlYWN0LXN0YXRpYyhcXFxcfFxcLylsaWIoXFxcXHxcXC8pYnJvd3Nlci8sIC93ZWJwYWNrLWZsdXNoLWNodW5rcy9dLnNvbWUoXG4gICAgICAgICAgZCA9PiBkLnRlc3QocmVzb2x2ZWQpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgYGNvbW1vbmpzICR7cmVzb2x2ZWR9YClcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKClcbiAgICB9LFxuICAgIG5vZGVFeHRlcm5hbHMoKSxcbiAgXVxuICByZXN1bHQubW9kdWxlLnJ1bGVzID0gcnVsZXMoc3RhdGUpXG4gIHJlc3VsdC5wbHVnaW5zID0gW1xuICAgIG5ldyB3ZWJwYWNrLkVudmlyb25tZW50UGx1Z2luKHByb2Nlc3MuZW52KSxcbiAgICBuZXcgQ2FzZVNlbnNpdGl2ZVBhdGhzUGx1Z2luKCksXG4gICAgbmV3IHdlYnBhY2sub3B0aW1pemUuTGltaXRDaHVua0NvdW50UGx1Z2luKHtcbiAgICAgIG1heENodW5rczogMSxcbiAgICB9KSxcbiAgXVxuICByZXR1cm4gcmVzdWx0XG59XG4iXX0=